// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  image           String?
  email           String?   @unique
  emailVerified   DateTime?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sessions        Session[]
  accounts        Account[]
  favorites       Favorite[]
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id        Int     @id @default(autoincrement())
  sessionToken String @unique
  userId Int
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id          String    @id @default(uuid()) @db.Uuid
  identifier  String
  token       String    @unique
  expires     DateTime

  @@unique([identifier, token])
}

model Movie {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  videoUrl      String
  thumbnailUrl  String
  genre         String
  duration      String
  favorites     Favorite[]
}

model Favorite {
  id            Int       @id @default(autoincrement())
  userId        Int
  movieId       Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie         Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
   status      String?

  @@unique([userId, movieId])
}
